generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  imageUrl       String
  email          String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  scores         Scores[]
  // refreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id])
  refreshTokenId Int?           @unique
  RefreshToken   RefreshToken[]

  @@map("users")
}

model Music {
  id              Int
  name            String
  assetBundleName String?
  genreId         Int
  genre           Genre            @relation(fields: [genreId], references: [id])
  releasedAt      DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  metaMusic       MetaMusic[]
  musicTag        MusicTag[]
  musicLists      MusicMusicList[]
  scores          Scores[]

  @@id([id, genreId])
}

model Scores {
  id               String    @id @unique @default(uuid())
  musicId          Int
  genreId          Int
  totalNoteCount   Int
  perfectPlusCount Int?
  perfectCount     Int?
  greatCount       Int?
  goodCount        Int?
  badCount         Int?
  musicDifficulty  String?
  missCount        Int
  userId           String
  metaMusicId      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  music            Music     @relation(fields: [musicId, genreId], references: [id, genreId])
  metaMusic        MetaMusic @relation(fields: [metaMusicId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
}

model Genre {
  id        Int      @id @unique @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  music     Music[]
}

model MetaMusic {
  id              String   @id @unique @default(uuid())
  musicId         Int
  genreId         Int
  musicDifficulty String
  playLevel       String
  totalNoteCount  Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  music           Music    @relation(fields: [musicId, genreId], references: [id, genreId])
  scores          Scores[]
}

model MusicTag {
  id        Int      @id @unique
  musicId   Int
  genreId   Int
  tagName   String
  tagId     Int
  music     Music    @relation(fields: [musicId, genreId], references: [id, genreId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MusicList {
  id        String           @id @default(uuid())
  genreId   Int
  name      String
  userId    String
  musics    MusicMusicList[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model MusicMusicList {
  musicId      Int
  musicGenreId Int
  musicListId  String
  music        Music     @relation(fields: [musicId, musicGenreId], references: [id, genreId])
  musicList    MusicList @relation(fields: [musicListId], references: [id])

  @@id([musicId, musicGenreId, musicListId])
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       String   @unique @map("user_id")
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model UnitProfile {
  id              Int @default(autoincrement())
  seq             Int
  genreId         Int
  unitName        String
  unitProfileName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([seq, genreId])
}
